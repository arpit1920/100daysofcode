# -*- coding: utf-8 -*-
"""00: Perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/vedantbahel/DLlearn/blob/master/Basic/00_Perceptron.ipynb
"""

#importing lib
import tensorflow as tf
import numpy as np
from tensorflow import keras

#defining a single layer; single neuron model
model = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])

#defining the model evaluation for backpropogation
model.compile(optimizer='sgd', loss='mean_squared_error')

#creating array of x and y such that y=(x/2) - 4

xs = np.array([0.0,  2.0, 4.0, 6.0, 8.0, 10.0], dtype=float)
ys = np.array([-4.0, -3.0, -2.0, -1.0, 0.0, 1.0], dtype=float)

#taraining the model with iterations (No. of front & back propogation)
model.fit(xs, ys, epochs=700)

print(model.predict([40.0]))
#Output is 15.25 for epochs 500 and 15.99 for epochs 700 
#actual output should have been 16
#but nothing is 100% efficient xD